{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Toggle Color\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"p\", {\n    class: _normalizeClass({\n      red: $data.isRed\n    }),\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleRed && $options.toggleRed(...args))\n  }, [_createTextVNode(\" This is \"), $data.isRed ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \"red\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"black\")), _createTextVNode(\"... but click me to toggle it. \")], 2 /* CLASS */), _createElementVNode(\"p\", {\n    style: _normalizeStyle({\n      color: $data.color\n    }),\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleColor && $options.toggleColor(...args))\n  }, \" This is \" + _toDisplayString($data.color) + \" ... but click me to toggle it. \", 5 /* TEXT, STYLE */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACEA,oBAAqB,YAAjB,cAAY;;;;;;;;6DAAhBC,UAAqB,EACrBD,oBAEI;IAFAE,KAAK;MAAAC,KAASC;IAAK;IAAKC,OAAK,yCAAEC,iDAAS;uBAAE,WACpC,GAAYF,WAAK,kBAAjBG,oBAA6B,oBAAV,KAAG,oBAAOA,oBAAyB,oBAAZ,OAAK,qBAAO,iCAChE,oBACAP,oBAEI;IAFAQ,KAAK;MAAAC,OAAIL;IAAK;IAAKC,OAAK,yCAAEC,qDAAW;KAAE,WACjC,oBAAGF,WAAK,IAAG,kCACrB","names":["_createElementVNode","_hoisted_1","class","red","$data","onClick","$options","_createElementBlock","style","color"],"sourceRoot":"","sources":["/Users/shinkiho/ExampleProjeck/vuex3_example.onda2me/src/views/example/03ToggleColor.vue"],"sourcesContent":["<template>\n  <h1>Toggle Color</h1>  \n  <p :class=\"{ red: isRed }\" @click=\"toggleRed\">\n    This is <span v-if=\"isRed\">red</span><span v-else>black</span>... but click me to toggle it.\n  </p>\n  <p :style=\"{ color }\" @click=\"toggleColor\">\n    This is {{ color }} ... but click me to toggle it.\n  </p>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      isRed: true,\n      color: 'green'\n    }\n  },\n  methods: {\n    toggleRed() {\n      this.isRed = !this.isRed\n    }, \n    toggleColor() {\n      this.color = this.color === 'green' ? 'blue' : 'green'\n    }\n  }\n}\n</script>\n<style>\n .red { color: red; }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}